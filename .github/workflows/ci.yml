name: CI

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main
      - "feature-**"
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for CI
        run: |
          cat > backend/.env << EOF
          SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG=True
          DATABASE_URL=postgresql://kaede:kaede@db:5432/kaede
          JWT_ACCESS_TOKEN_HOURS=1
          JWT_REFRESH_TOKEN_DAYS=1
          JWT_ROTATE_REFRESH_TOKENS=True
          JWT_UPDATE_LAST_LOGIN=True
          EOF

      - name: Run backend tests with Docker Compose
        run: |
          docker compose up -d db
          timeout 60 bash -c 'until docker compose exec -T db pg_isready -U kaede -d kaede; do sleep 2; done'
          docker compose run --rm backend python manage.py migrate
          docker compose run --rm backend python manage.py test --verbosity=2
          docker compose down

      # フロントエンドテスト（Node.js）
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefix frontend

      - name: Run linting
        run: npm run lint --prefix frontend

      - name: Build project
        run: npm run build --prefix frontend

  preview:
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main') }}
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefix frontend

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Create .vercel/project.json
        run: |
          mkdir -p .vercel
          echo '{
            "orgId": "${{ secrets.VERCEL_ORG_ID }}",
            "projectId": "${{ secrets.VERCEL_PROJECT_ID }}",
            "settings": {
              "rootDirectory": "frontend"
            }
          }' > .vercel/project.json

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_KAEDE_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_KAEDE_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: echo "url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_KAEDE_TOKEN }})" >> $GITHUB_OUTPUT

  prod:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefix frontend

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Create .vercel/project.json
        run: |
          mkdir -p .vercel
          echo '{
            "orgId": "${{ secrets.VERCEL_ORG_ID }}",
            "projectId": "${{ secrets.VERCEL_PROJECT_ID }}",
            "settings": {
              "rootDirectory": "frontend"
            }
          }' > .vercel/project.json

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_KAEDE_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_KAEDE_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prod --prebuilt --token=${{ secrets.VERCEL_KAEDE_TOKEN }}
