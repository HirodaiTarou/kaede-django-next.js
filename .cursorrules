# Cursor Rules for Kaede Project

## プロジェクト概要
- Next.js + Django + Supabase を使用したモダンなWebアプリケーション
- モノレポ構成：フロントエンドとバックエンドを分離
- 型安全性重視：DRF → OpenAPI → TypeScript型自動生成

## コーディング規約

### Python (Backend)
- 型ヒントを必ず使用する
- blackによるコードフォーマットに従う
- isortによるインポート整理を行う
- flake8によるリントを通過させる
- 日本語のコメントとドキュメントを推奨

### 命名規則
- クラス名: PascalCase (例: CustomUser, UserManager)
- 関数・変数名: snake_case (例: create_user, user_email)
- 定数: UPPER_SNAKE_CASE (例: USERNAME_FIELD, REQUIRED_FIELDS)

### Django固有
- AbstractBaseUserを使用したカスタムユーザーモデル
- モデルフィールドには型ヒントを付ける
- 管理画面のカスタマイズを行う
- APIエンドポイントはRESTful設計に従う
- Django REST Framework (DRF) + OpenAPI/Swagger統合
- URL path versioning (`/api/v1/`)を使用

### Next.js固有
- TypeScriptを使用した型安全な開発
- コンポーネントベースのアーキテクチャ
- API型の自動生成（openapi-typescript）
- Vercelデプロイメント対応

## コミュニケーション
- 日本語で返答する
- 技術的な説明は分かりやすく
- コード例は必ず実装可能な形で提示
- エラーや問題がある場合は解決策も提示

## 開発フロー
1. 型安全性を最優先に考慮（DRF → OpenAPI → TypeScript型自動生成）
2. セキュリティを重視
3. テストコードの作成を推奨
4. ドキュメントの更新を忘れずに
5. Docker環境での開発
6. Vercel/Render.comデプロイメント対応

## 禁止事項
- 型ヒントなしの関数定義
- ハードコードされたパスワードやAPIキー
- 未使用のインポート
- 長すぎる関数（50行以上は分割を検討）

## 推奨事項
- 環境変数の使用
- ログ出力の実装
- エラーハンドリングの徹底
- パフォーマンスの考慮
- drf-spectacularによるOpenAPI仕様自動生成
- openapi-typescriptによる型自動生成
- Docker環境での開発

## ファイル構造ルール
- Backend: `backend/` ディレクトリ内（Django + Docker）
- Frontend: `frontend/` ディレクトリ内（Next.js + TypeScript）
- 設定ファイル: プロジェクトルート
- ドキュメント: `docs/` ディレクトリ
- ポリレポ構成を採用

## セキュリティルール
- 認証・認可の実装を必須とする
- 入力値の検証を徹底する
- SQLインジェクション対策を実装する
- XSS対策を実装する

## パフォーマンスルール
- データベースクエリの最適化
- キャッシュの活用
- 非同期処理の検討
- 画像・アセットの最適化
- Supabaseリアルタイム機能の活用
- Vercelのエッジ機能の活用 